-- PCL metrics engine database structure
-- Compatible with mysql 5.0+
-- AfterLifeLochie, 2014

DROP TABLE IF EXISTS SESSIONS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS PRODUCTVIEWS;
DROP TABLE IF EXISTS VIEWELEMENTS;
DROP TABLE IF EXISTS ELEMENTS;
DROP TABLE IF EXISTS COMPONENTS;
DROP TABLE IF EXISTS PRODUCTS;
DROP TABLE IF EXISTS VIEWS;

-- CREATE USERS
CREATE TABLE USERS (
	USER_ID				INTEGER			NOT NULL 	AUTO_INCREMENT,
	USER_NAME			VARCHAR(255)	NOT NULL,
	USER_HASH			VARCHAR(255)	NOT NULL,
	USER_RIGHTS			INTEGER			NOT NULL,
	PRIMARY KEY(USER_ID)
);

-- CREATE SESSIONS
CREATE TABLE SESSIONS (
	SESSION_TAG			VARCHAR(255)	NOT NULL,
	SESSION_USERID		INTEGER			NOT NULL,
	SESSION_IPADDR_H	BIGINT			NOT NULL,   -- HIWORD(V6) / VOID
	SESSION_IPADDR_L	BIGINT			NOT NULL,	-- LOWORD(V6) / V4
	SESSION_AGENT		VARCHAR(512)	NOT NULL,
	SESSION_EXPIRY		INTEGER			NOT NULL,
	PRIMARY KEY (SESSION_TAG), 
	FOREIGN KEY (SESSION_USERID) REFERENCES USERS(USER_ID)
);

-- CREATE COMPONENTS
CREATE TABLE COMPONENTS (
	COMPONENT_ID		INTEGER			NOT NULL 	AUTO_INCREMENT,
	COMPONENT_NAME		VARCHAR(255)	NOT NULL,
	COMPONENT_CLASS		VARCHAR(255)	NOT NULL,
	COMPONENT_ARGS		TEXT			NOT NULL,
	PRIMARY KEY (COMPONENT_ID)
);

-- CREATE VIEWS
CREATE TABLE VIEWS (
	VIEW_ID					INTEGER			NOT NULL	AUTO_INCREMENT,
	VIEW_NAME				VARCHAR(255)	NOT NULL,
	VIEW_ON_NAVIGATION		INTEGER(1)		NOT NULL,
	VIEW_RIGHTS_REQUIRED	INTEGER			NOT NULL,
	PRIMARY KEY (VIEW_ID)
);

-- CREATE VIEW ELEMENTS
CREATE TABLE VIEWELEMENTS (
	VIEW_ID			INTEGER		NOT NULL,
	COMPONENT_ID	INTEGER 	NOT NULL,
	PRIMARY KEY (VIEW_ID, COMPONENT_ID),
	FOREIGN KEY (VIEW_ID) REFERENCES VIEWS(VIEW_ID),
	FOREIGN KEY (COMPONENT_ID) REFERENCES COMPONENTS(COMPONENT_ID)
);

-- CREATE PRODUCTS
CREATE TABLE PRODUCTS (
	PRODUCT_ID				INTEGER			NOT NULL AUTO_INCREMENT,
	PRODUCT_NAME			VARCHAR(255)	NOT NULL,
	PRODUCT_HOME			VARCHAR(255)	NOT NULL,
	PRODUCT_DEFAULT_VIEW	INTEGER			NOT NULL,
	PRIMARY KEY (PRODUCT_ID),
	FOREIGN KEY (PRODUCT_DEFAULT_VIEW) REFERENCES VIEWS(VIEW_ID)
);

-- CREATE PRODUCT VIEWS
CREATE TABLE PRODUCTVIEWS (
	PRODUCT_ID	INTEGER 			NOT NULL,
	VIEW_ID		INTEGER		NOT NULL,
	PRIMARY KEY (PRODUCT_ID, VIEW_ID),
	FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
	FOREIGN KEY (VIEW_ID) REFERENCES VIEWS(VIEW_ID)
);

-- CREATE SESSION-USER VIEW; do not allow the selection of
-- fields which are protected.
CREATE OR REPLACE DEFINER = CURRENT_USER SQL SECURITY INVOKER
	VIEW USER_SESSIONS AS
		SELECT USER_ID, USER_NAME, USER_RIGHTS, SESSION_TAG, 
			SESSION_IPADDR_H, SESSION_IPADDR_L, SESSION_AGENT, 
			SESSION_EXPIRY 
		FROM SESSIONS 
		LEFT OUTER JOIN USERS 
			ON SESSIONS.SESSION_USERID = USERS.USER_ID;

-- CREATE VIEW-COMPONENTS VIEW; select all of view elements,
-- then include all components and then glue any assigned
-- views too.
CREATE OR REPLACE DEFINER = CURRENT_USER SQL SECURITY INVOKER
	VIEW VIEW_COMPONENTS AS
		SELECT VIEWS.VIEW_ID, VIEW_NAME, VIEW_ON_NAVIGATION, VIEW_RIGHTS_REQUIRED,
			COMPONENTS.COMPONENT_ID, COMPONENT_NAME, COMPONENT_CLASS, COMPONENT_ARGS
		FROM VIEWELEMENTS
		RIGHT OUTER JOIN COMPONENTS ON VIEWELEMENTS.COMPONENT_ID = COMPONENTS.COMPONENT_ID
		LEFT OUTER JOIN VIEWS ON VIEWELEMENTS.VIEW_ID = VIEWS.VIEW_ID;
